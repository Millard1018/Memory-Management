from prettytable import PrettyTable

class DynamicPartitionAllocation:
    def __init__(self):
        self.memory_size = self.validate_int("Enter the total memory size: ", 10, 1000) # User will determine memory_size
        os_size = self.validate_int("Enter the operating system size: ", 1, self.memory_size - 1) # Size of OS
        self.os_size = os_size # os_size will be initialized to the insatnce var of class
        self.memory_size -= os_size # memory_size will be deducted by OS which user will enter
        print(f"Usable memory after OS allocation: {self.memory_size}")

        self.holes = [(os_size, self.memory_size)]  # To store determine the size occupied and the start of the address
        self.jobs = {}  # Stores job_id their (start_address, job_size)
        self.waiting_jobs = []  # Queue for waiting jobs
        self.next_fit_index = 0

    def validate_int(self, prompt, min_val, max_val): # To verify memory size of OS and jobs
        while True:
            try:
                value = int(input(prompt))
                if min_val <= value <= max_val: # Will verify the specific range and will return if within the range
                    return value
                print(f"Value must be between {min_val} and {max_val}.")
            except ValueError:
                print("Invalid input. Please enter an integer.") # Characters inputted

    def allocate_job(self, allocation_scheme):
        print("\nEnter 'STOP' when finish allocating")
        while True: # Will continue until user enter 'STOP'
            job_id = input("Enter job ID: ").upper()
            if job_id == 'STOP':
                break

            if job_id in self.jobs: # Jobs is already in jobs
                print("Job ID already exists. Choose a different ID.")
                continue

            job_size = self.validate_int("Enter job size: ", 1, self.memory_size) 

            # Attempt to allocate from available holes using the choosen scheme
            hole_index = self.find_hole(allocation_scheme, job_size)

            if hole_index is None: # if no available hole is found will be appended to waiting
                print("Not enough contiguous memory available. Adding job to waiting list.")
                self.waiting_jobs.append((job_id, job_size))
                continue

            start_address, hole_size = self.holes.pop(hole_index) # Teporarily remove free hole if free hole has value
            self.jobs[job_id] = (start_address, job_size)

            if hole_size > job_size: # if free hole has value free hole will stil be available
                self.holes.insert(hole_index, (start_address + job_size, hole_size - job_size))

    def find_hole(self, scheme, job_size): # To find and insert jobs into the appropriate free hole depending on the allocation scheme
        if scheme == 'A':  # First Fit
            for i, (start, size) in enumerate(self.holes):
                if size >= job_size: # if hole size is larger that job_size
                    return i
        elif scheme == 'B':  # Best Fit
            best_index = None
            best_size = float('inf') # initialize as positive infinity to determine the smallest appropriate free hole
            for i, (start, size) in enumerate(self.holes):
                if size >= job_size and size < best_size:
                    best_index = i 
                    best_size = size
            return best_index
        elif scheme == 'C':  # Next Fit
            for i in range(self.next_fit_index, len(self.holes) + self.next_fit_index):
                idx = i % len(self.holes)
                start, size = self.holes[idx]
                if size >= job_size:
                    self.next_fit_index = (idx + 1) % len(self.holes)
                    return idx
        elif scheme == 'D':  # Worst Fit
            worst_index = None
            worst_size = -1 # initialize as -1 to determine the biggest free hole
            for i, (start, size) in enumerate(self.holes):
                if size >= job_size and size > worst_size: # if free_hole is enough and the largest of the free hole
                    worst_index = i
                    worst_size = size
            return worst_index
        return None

    def deallocate_job(self):
        print("\nEnter 'STOP' when finish deallocating")
        # Will continue until user enter 'STOP'
        while True:
            job_id = input("Enter job ID to deallocate: ").upper()
            if job_id == 'STOP':
                break

            if job_id not in self.jobs: # job_id is not yet entered
                print("Job ID not found.")
                continue

            start_address, job_size = self.jobs.pop(job_id) # Value of self.jobs will be appended to free holes
            self.holes.append((start_address, job_size))
            self.holes.sort()  # Keep holes sorted by address
            self.merge_holes()

            # Attempt to allocate waiting jobs
            self.allocate_waiting_jobs()

    def allocate_waiting_jobs(self):
        new_waiting_jobs = []
        for job_id, job_size in self.waiting_jobs:
            hole_index = self.find_hole('A', job_size)  # Default to First Fit for waiting jobs
            if hole_index is not None:
                start_address, hole_size = self.holes.pop(hole_index)
                self.jobs[job_id] = (start_address, job_size)

                if hole_size > job_size:
                    self.holes.insert(hole_index, (start_address + job_size, hole_size - job_size))
                print(f"Waiting job '{job_id}' allocated at address {start_address}.")
            else:
                new_waiting_jobs.append((job_id, job_size))

        self.waiting_jobs = new_waiting_jobs

    def merge_holes(self): # Will merged free hole in self.holes
        merged_holes = [] 
        for start, size in self.holes: 
            if merged_holes and merged_holes[-1][0] + merged_holes[-1][1] == start:
                last_start, last_size = merged_holes.pop()
                merged_holes.append((last_start, last_size + size))
            else:
                merged_holes.append((start, size))
        self.holes = merged_holes 

    def display_memory_state(self):
        table = PrettyTable() # table is initialize to the library PrettyTable to access its module
        table.field_names = ["Status", "Partition Size", "Partition Start"] # Header for prettytables

        table.add_row(["OS", self.os_size, 0]) # First Row for OS

        allocated = sorted([(start, size, f"{job_id}") for job_id, (start, size) in self.jobs.items()])
        holes = sorted([(start, size, "Free Hole") for start, size in self.holes])
        memory_state = sorted(allocated + holes)

        for start, size, status in memory_state:
            table.add_row([status, size, start])

        print(table)

        if self.waiting_jobs:
            print("\nWaiting Jobs:")
            for job_id, job_size in self.waiting_jobs:
                print(f"Job '{job_id}' of size {job_size}")

    def run(self):
        print("Choose Allocation Scheme:\n'A'-First Fit\n'B'-Best Fit\n'C'-Next Fit\n'D'-Worst Fit")
        allocation_scheme = input("Enter the letter of your choice: ").upper()
        if allocation_scheme not in ['A', 'B', 'C', 'D']:
            print("Invalid choice. Exiting program.")
            return

        while True:
            print("\n1. Allocate Job\n2. Deallocate Job\n3. Display Memory State\n4. Exit")
            choice = input("Enter your choice: ")

            if choice == '1':
                self.allocate_job(allocation_scheme)
            elif choice == '2':
                self.deallocate_job()
            elif choice == '3':
                self.display_memory_state()
            elif choice == '4':
                print("Exiting program.")
                break
            else:
                print("Invalid choice. Please try again.")

if __name__ == '__main__': # Main guard will run only inside of this block
    dpa = DynamicPartitionAllocation()
    dpa.run()